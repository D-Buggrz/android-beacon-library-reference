package com.dbuggrz.activities.async;import android.net.Uri;import android.os.AsyncTask;import android.util.Log;import com.dbuggrz.activities.RoomDetailActivity;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;/** * Created by Mike on 3/6/2016. */public class BeaconsDetailAsyncTask extends AsyncTask<String, Void, LocationDetail> {    private static final String LOG_TAG = BeaconsDetailAsyncTask.class.getName();    private static final String FORECAST_URL_SCHEME = "https";    private static final String FORECAST_URL_AUTHORITY = "trvrfid-1280.appspot.com";    private static final String FORECAST_URL_PATH = "read";    private static final String MODE = "json";    private static final String MODE_PARAM_NAME = "format";    private static final String QUERY_PARAM_NAME = "id";    private RoomDetailActivity roomDetailActivity;    @Override    protected LocationDetail doInBackground(String... params) {        boolean hardCodedLocations = false;        if (hardCodedLocations) {            RoomDetail roomDetail = new RoomDetail();            roomDetail.setUuid("f8b27c66-a4b3-42fd-ab5b-5779182a5272");            roomDetail.setDescription("Nice conference rooom");            roomDetail.setName("Conference room A");            roomDetail.setHowManyPeople("80");            roomDetail.setMeetingAgenda("Discussion on synnergistic management solutions.");            roomDetail.setVideoConferenceEnabled("No Video");            RoomDetail roomDetail2 = new RoomDetail();            roomDetail2.setUuid("1812cc23-5420-4875-bb9b-341cf3d8d88d");            roomDetail2.setDescription("A Cave");            roomDetail2.setName("Cavern B");            roomDetail2.setHowManyPeople("50");            roomDetail2.setMeetingAgenda("We're gonna start a first and try to survive the night. ");            roomDetail2.setVideoConferenceEnabled("No Video");            return roomDetail2;        }        // These two need to be declared outside the try/catch        // so that they can be closed in the finally block.        HttpURLConnection urlConnection = null;        BufferedReader reader = null;        // Will contain the raw JSON response as a string.        String forecastJsonStr = null;        try {            // Construct the URL for the OpenWeatherMap query            // Possible parameters are avaiable at OWM's forecast API page, at            // http://openweathermap.org/API#forecast            Log.d(LOG_TAG, "Refreshing the data with the following room UUID: " + params[0]);            Uri.Builder uriBuilder = new Uri.Builder();            uriBuilder.scheme(FORECAST_URL_SCHEME).authority(FORECAST_URL_AUTHORITY).path(FORECAST_URL_PATH)                    .appendQueryParameter(QUERY_PARAM_NAME, params[0])                    .appendQueryParameter(MODE_PARAM_NAME, MODE);            Log.d(LOG_TAG, "Refreshing the data with the following url: " + uriBuilder.toString());            URL url = new URL(uriBuilder.toString());            // Create the request to OpenWeatherMap, and open the connection            urlConnection = (HttpURLConnection) url.openConnection();            urlConnection.setRequestMethod("GET");            urlConnection.connect();            // Read the input stream into a String            InputStream inputStream = urlConnection.getInputStream();            StringBuffer buffer = new StringBuffer();            if (inputStream == null) {                // Nothing to do.                Log.e(LOG_TAG, "There is a null return from the service. ");                return null;            }            reader = new BufferedReader(new InputStreamReader(inputStream));            String line;            while ((line = reader.readLine()) != null) {                // Since it's JSON, adding a newline isn't necessary (it won't affect parsing)                // But it does make debugging a *lot* easier if you print out the completed                // buffer for debugging.                buffer.append(line + "\n");            }            if (buffer.length() == 0) {                // Stream was empty.  No point in parsing.                return null;            }            forecastJsonStr = buffer.toString();            Log.d(LOG_TAG, forecastJsonStr);            LocationDetail ret = getLocationDetailFromJSONString(forecastJsonStr);            Log.d(LOG_TAG, "Returning location " + ret.getUuid() + " name: " + ret.getName());            return ret;        } catch (IOException e) {            Log.e("PlaceholderFragment", "Error ", e);            // If the code didn't successfully get the weather data, there's no point in attemping            // to parse it.            return null;        } catch (JSONException jse) {            Log.e(LOG_TAG, "JSON Parse Exception: ", jse);            return null;        }finally{            if (urlConnection != null) {                urlConnection.disconnect();            }            if (reader != null) {                try {                    reader.close();                } catch (final IOException e) {                    Log.e(LOG_TAG, "Error closing stream", e);                }            }        }    }    @Override    protected void onPostExecute(LocationDetail locationDetail) {        super.onPostExecute(locationDetail);        this.roomDetailActivity.updateRoomDetails(locationDetail);    }    /**     * Take the String representing the complete forecast in JSON Format and     * pull out the data we need to construct the Strings needed for the wireframes.     *     * Fortunately parsing is easy:  constructor takes the JSON string and converts it     * into an Object hierarchy for us.     */    private LocationDetail getLocationDetailFromJSONString(String forecastJsonStr)            throws JSONException {        LocationDetail locationDetail = new RoomDetail();        JSONObject locationDetailObj = new JSONObject(forecastJsonStr);        locationDetail = new RoomDetail();        ((RoomDetail) locationDetail).setVideoConferenceEnabled(locationDetailObj.getString("conferenceRooms"));        ((RoomDetail) locationDetail).setMeetingAgenda(locationDetailObj.getString("currentMeetingAgenda"));        ((RoomDetail) locationDetail).setHowManyPeople(locationDetailObj.getString("roomCapacity"));        locationDetail.setDescription(locationDetailObj.getString("description"));        locationDetail.setName(locationDetailObj.getString("locationName"));        locationDetail.setUuid(locationDetailObj.getString("uuid"));        locationDetail.setImageUrl(locationDetailObj.getString("imageURLs"));        locationDetail.setId(locationDetailObj.getString("id"));        return locationDetail;    }    public RoomDetailActivity getRoomDetailActivity() {        return roomDetailActivity;    }    public void setRoomDetailActivity(RoomDetailActivity roomDetailActivity) {        this.roomDetailActivity = roomDetailActivity;    }}